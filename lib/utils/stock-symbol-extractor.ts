// Common company names to ticker symbol mappings
const COMPANY_TO_TICKER: Record<string, string> = {
  // Tech companies
  'apple': 'AAPL',
  'microsoft': 'MSFT',
  'google': 'GOOGL',
  'alphabet': 'GOOGL',
  'amazon': 'AMZN',
  'meta': 'META',
  'facebook': 'META',
  'netflix': 'NFLX',
  'tesla': 'TSLA',
  'nvidia': 'NVDA',
  'amd': 'AMD',
  'advanced micro devices': 'AMD',
  'intel': 'INTC',
  'ibm': 'IBM',
  'oracle': 'ORCL',
  'salesforce': 'CRM',
  'adobe': 'ADBE',
  'cisco': 'CSCO',
  'qualcomm': 'QCOM',
  'broadcom': 'AVGO',
  'texas instruments': 'TXN',
  'ti': 'TXN',
  'micron': 'MU',
  'micron technology': 'MU',
  'paypal': 'PYPL',
  'square': 'SQ',
  'block': 'SQ',
  'zoom': 'ZM',
  'shopify': 'SHOP',
  'twitter': 'TWTR',
  'snap': 'SNAP',
  'snapchat': 'SNAP',
  'uber': 'UBER',
  'lyft': 'LYFT',
  'airbnb': 'ABNB',
  'spotify': 'SPOT',
  'pinterest': 'PINS',
  'roku': 'ROKU',
  'unity': 'U',
  'palantir': 'PLTR',
  'snowflake': 'SNOW',
  'cloudflare': 'NET',
  'crowdstrike': 'CRWD',
  'datadog': 'DDOG',
  'twilio': 'TWLO',
  'okta': 'OKTA',
  'docusign': 'DOCU',
  'slack': 'WORK',
  'dropbox': 'DBX',
  'yelp': 'YELP',
  'zillow': 'Z',
  'robinhood': 'HOOD',
  'coinbase': 'COIN',
  
  // Retail and Consumer
  'walmart': 'WMT',
  'target': 'TGT',
  'costco': 'COST',
  'home depot': 'HD',
  'lowes': "LOW",
  'mcdonalds': 'MCD',
  'starbucks': 'SBUX',
  'coca cola': 'KO',
  'coke': 'KO',
  'pepsi': 'PEP',
  'pepsico': 'PEP',
  'nike': 'NKE',
  'disney': 'DIS',
  'walt disney': 'DIS',
  'netflix': 'NFLX',
  'chipotle': 'CMG',
  'dominos': 'DPZ',
  'dominos pizza': 'DPZ',
  
  // Financial
  'jpmorgan': 'JPM',
  'jp morgan': 'JPM',
  'bank of america': 'BAC',
  'bofa': 'BAC',
  'wells fargo': 'WFC',
  'goldman sachs': 'GS',
  'morgan stanley': 'MS',
  'citigroup': 'C',
  'citi': 'C',
  'american express': 'AXP',
  'amex': 'AXP',
  'visa': 'V',
  'mastercard': 'MA',
  
  // Automotive
  'ford': 'F',
  'general motors': 'GM',
  'gm': 'GM',
  'toyota': 'TM',
  'honda': 'HMC',
  'ferrari': 'RACE',
  'lucid': 'LCID',
  'rivian': 'RIVN',
  'nio': 'NIO',
  
  // Telecom
  'att': 'T',
  'at&t': 'T',
  'verizon': 'VZ',
  't-mobile': 'TMUS',
  'tmobile': 'TMUS',
  'comcast': 'CMCSA',
  
  // Healthcare and Pharma
  'pfizer': 'PFE',
  'moderna': 'MRNA',
  'johnson & johnson': 'JNJ',
  'johnson and johnson': 'JNJ',
  'unitedhealth': 'UNH',
  'united health': 'UNH',
  'merck': 'MRK',
  'abbott': 'ABT',
  'abbvie': 'ABBV',
  'eli lilly': 'LLY',
  'amgen': 'AMGN',
  'gilead': 'GILD',
  'regeneron': 'REGN',
  'biogen': 'BIIB',
  'cvs': 'CVS',
  'walgreens': 'WBA',
  
  // Energy
  'exxon': 'XOM',
  'exxonmobil': 'XOM',
  'chevron': 'CVX',
  'shell': 'SHEL',
  'bp': 'BP',
  'conocophillips': 'COP',
  'conoco phillips': 'COP',
  'occidental': 'OXY',
  'oxy': 'OXY',
  
  // Indexes and ETFs
  'spy': 'SPY',
  's&p': 'SPY',
  's&p 500': 'SPY',
  'sp500': 'SPY',
  'qqq': 'QQQ',
  'nasdaq': 'QQQ',
  'dow': 'DIA',
  'dow jones': 'DIA',
  'voo': 'VOO',
  'vti': 'VTI',
  'arkk': 'ARKK',
  'ark innovation': 'ARKK',
};

// Common stock-related phrases that might appear in queries
const STOCK_PHRASES = [
  'stock',
  'price',
  'share',
  'ticker',
  'trading',
  'market',
  'investment',
  'portfolio',
  'chart',
  'graph',
  'performance',
  'value',
  'worth',
  'doing',
  'going',
  'trend',
  'movement',
  'volatility',
  'dividend',
  'earnings',
  'financials',
  'quote',
  'buy',
  'sell',
  'trade',
  'investor',
  'shareholder',
  'stock market',
  'wall street',
  'nyse',
  'nasdaq',
  'dow',
  'index',
  'etf',
  'fund',
  'asset',
  'security',
  'equity',
  'exchange',
  'broker',
  'trading',
  'shares',
  'stocks',
  'prices',
  'values',
  'quotes',
  'rates',
  'returns',
  'gains',
  'losses',
  'profit',
  'loss',
  'bull',
  'bear',
  'bullish',
  'bearish',
  'rally',
  'correction',
  'crash',
  'boom',
  'bubble',
  'dip',
  'peak',
  'bottom',
  'high',
  'low',
  'open',
  'close',
  'volume',
  'cap',
  'market cap',
  'valuation',
  'pe ratio',
  'eps',
  'revenue',
  'income',
  'growth',
  'decline',
  'increase',
  'decrease',
  'up',
  'down',
  'rising',
  'falling',
  'jumped',
  'dropped',
  'surged',
  'plunged',
  'gained',
  'lost',
  'higher',
  'lower',
  'better',
  'worse',
  'outperform',
  'underperform',
  'beat',
  'miss',
  'exceed',
  'fall short',
  'estimate',
  'forecast',
  'prediction',
  'outlook',
  'guidance',
  'target',
  'recommendation',
  'rating',
  'upgrade',
  'downgrade',
  'buy',
  'sell',
  'hold',
  'overweight',
  'underweight',
  'neutral',
  'positive',
  'negative',
  'bullish',
  'bearish',
  'optimistic',
  'pessimistic',
  'confident',
  'cautious',
  'concerned',
  'worried',
  'excited',
  'disappointed',
  'surprised',
  'shocked',
  'expected',
  'unexpected',
  'anticipated',
  'unanticipated',
  'predicted',
  'unpredicted',
  'forecasted',
  'unforecasted',
  'projected',
  'unprojected',
  'estimated',
  'unestimated',
  'calculated',
  'uncalculated',
  'measured',
  'unmeasured',
  'valued',
  'unvalued',
  'priced',
  'unpriced',
  'quoted',
  'unquoted',
  'traded',
  'untraded',
  'bought',
  'unbought',
  'sold',
  'unsold',
  'invested',
  'uninvested',
  'divested',
  'undivested',
  'allocated',
  'unallocated',
  'distributed',
  'undistributed',
  'paid',
  'unpaid',
  'earned',
  'unearned',
  'spent',
  'unspent',
  'saved',
  'unsaved',
  'made',
  'unmade',
  'lost',
  'unlost',
  'gained',
  'ungained',
  'profited',
  'unprofited',
  'cost',
  'uncost',
  'worth',
  'unworth',
  'value',
  'unvalue',
  'price',
  'unprice',
  'rate',
  'unrate',
  'return',
  'unreturned',
];

// Direct ticker symbols that might be mentioned
const DIRECT_TICKERS = [
  'AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'META', 'NFLX', 'TSLA', 'NVDA', 'AMD', 
  'INTC', 'IBM', 'ORCL', 'CRM', 'ADBE', 'CSCO', 'QCOM', 'AVGO', 'TXN', 'MU', 'PYPL', 
  'SQ', 'ZM', 'SHOP', 'TWTR', 'SNAP', 'UBER', 'LYFT', 'ABNB', 'SPOT', 'PINS', 'ROKU', 
  'U', 'PLTR', 'SNOW', 'NET', 'CRWD', 'DDOG', 'TWLO', 'OKTA', 'DOCU', 'WORK', 'DBX', 
  'YELP', 'Z', 'HOOD', 'COIN', 'WMT', 'TGT', 'COST', 'HD', 'LOW', 'MCD', 'SBUX', 'KO', 
  'PEP', 'NKE', 'DIS', 'NFLX', 'CMG', 'DPZ', 'JPM', 'BAC', 'WFC', 'GS', 'MS', 'C', 
  'AXP', 'V', 'MA', 'F', 'GM', 'TM', 'HMC', 'RACE', 'LCID', 'RIVN', 'NIO', 'T', 'VZ', 
  'TMUS', 'CMCSA', 'PFE', 'MRNA', 'JNJ', 'UNH', 'MRK', 'ABT', 'ABBV', 'LLY', 'AMGN', 
  'GILD', 'REGN', 'BIIB', 'CVS', 'WBA', 'XOM', 'CVX', 'SHEL', 'BP', 'COP', 'OXY', 
  'SPY', 'QQQ', 'DIA', 'VOO', 'VTI', 'ARKK'
];

/**
 * Extracts potential stock symbols from a natural language query
 * @param query The user's natural language query
 * @returns An array of potential stock symbols, or null if none found
 */
export function extractStockSymbols(query: string): string[] | null {
  if (!query) return null;
  
  // Convert query to lowercase for case-insensitive matching
  const lowerQuery = query.toLowerCase();
  
  // Check if the query contains any stock-related phrases
  const containsStockPhrase = STOCK_PHRASES.some(phrase => 
    lowerQuery.includes(phrase.toLowerCase())
  );
  
  if (!containsStockPhrase) {
    // If no stock phrases are found, this might not be a stock-related query
    return null;
  }
  
  // First, check for direct ticker mentions (case sensitive)
  const directTickers = DIRECT_TICKERS.filter(ticker => 
    new RegExp(`\\b${ticker}\\b`, 'i').test(query)
  );
  
  if (directTickers.length > 0) {
    return directTickers;
  }
  
  // Next, check for company name mentions
  const companyMatches = Object.keys(COMPANY_TO_TICKER).filter(company => 
    lowerQuery.includes(company.toLowerCase())
  );
  
  if (companyMatches.length > 0) {
    // Map company names to ticker symbols
    return companyMatches.map(company => COMPANY_TO_TICKER[company]);
  }
  
  // If we've reached here, we couldn't find any specific stock symbols
  return null;
}

/**
 * Gets the most likely stock symbol from a query
 * @param query The user's natural language query
 * @returns The most likely stock symbol, or null if none found
 */
export function getMostLikelyStockSymbol(query: string): string | null {
  const symbols = extractStockSymbols(query);
  return symbols && symbols.length > 0 ? symbols[0] : null;
} 